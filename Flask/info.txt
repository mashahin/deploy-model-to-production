The two configuration files installed in setup() are the upstart configuration to /etc/init/mlapi.conf and a sudoers file /etc/sudoers.d/mlapi to allow a normal user to stop and restart the service without requiring root permissions.

mlapi.conf:

description "mlapi"

start on (filesystem)
stop on runlevel [016]

respawn
setuid deploy
setgid nogroup
chdir /apps/mlapi

exec /home/deploy/anaconda/envs/ml/bin/gunicorn mlapi:app --access-logfile /apps/mlapi/logs/access.log
upstart_mlapi:

# gunicorn service
deploy ALL=(ALL) NOPASSWD: /usr/sbin/service mlapi start, /usr/sbin/service mlapi stop, /usr/sbin/service mlapi restart, /usr/sbin/service mlapi status
I’m running the service using gunicorn - feel free to pick your own favourite app server.

Finally, you need save the anaconda environment.yml by running:

$ conda env export > environment.yml
Now you’re ready to setup the server:

$ fab -R prd setup
And deploy your code:

$ fab -R prd deploy
It should be running now, listening on the default port of 8000. You’ll probably want to configure nginx as a proxy in front of gunicorn to secure the service with authentication if exposing to the world.

If you have any issues, it’s useful to check the service is running:

$ service mlapi status
Also check the upstart logs at /var/log/upstart/mlapi.log.

And also check you can manually run the above gunicorn command to start your server if it is failing to start for whatever reason.